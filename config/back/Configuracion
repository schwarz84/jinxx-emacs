





   
  

      



  ;; Configuración de projectile.
  (use-package projectile
    :init
    (projectile-mode +1)
    :bind (:map projectile-mode-map
                ("s-p" . projectile-command-map)
                ("C-c p" . projectile-command-map))
    :config
    (setq projectile-project-search-path '("/home/Charly/proyectos/" "/home/Charly/sandbox/")
          projectile-completion-system 'helm)
    (setq projectile-enable-caching t)
    (setq projectile-indexing-method 'alien)
    (setq projectile-generic-command "rg --files --hidden")
    (projectile-discover-projects-in-search-path)

    ;; Ignorar archivos ocultos
    (add-to-list 'projectile-globally-ignored-files ".*")
    (add-to-list 'projectile-globally-ignored-directories ".*")
  
    ;; Función personalizada para ordenar archivos por fecha de modificación
    (defun projectile-files-mod-time (file)
      "Return the modification time of FILE."
      (nth 5 (file-attributes file)))
    
    ;; Función personalizada para ordenar archivos por fecha de modificación
    (defun projectile-sort-files-by-mod-time (files)
      "Sort FILES by modification time."
      (sort files (lambda (a b)
                    (time-less-p (projectile-files-mod-time b)
                                 (projectile-files-mod-time a)))))
  
  ;; Función para filtrar archivos ocultos y ordenar por fecha de modificación
  (defun my-projectile-find-file ()
    "Find file in project, hide ignored files, and sort by modification time."
    (interactive)
    (let* ((project-files (projectile-current-project-files))
           (filtered-files (seq-filter (lambda (file)
                                         (not (string-match-p "^\\." (file-name-nondirectory file))))
                                       project-files))
           (sorted-files (projectile-sort-files-by-mod-time filtered-files)))
      (projectile-completing-read "Find file: " sorted-files)))
  
    ;; Reemplazar el comando original por el personalizado
    (define-key projectile-command-map (kbd "f") 'my-projectile-find-file)
    (define-key projectile-command-map (kbd "s-f") 'my-projectile-find-file)  
  
    (define-key projectile-mode-map (kbd "C-c u") 'helm-projectile)
  
    ;; Integración con desktop
    (defun my-desktop-path-for-project (project)
      "Return the path to the desktop file for the given PROJECT."
      (let ((desktop-dir (expand-file-name (concat "~/.emacs.d/desktops/" (projectile-project-name project)))))
        (unless (file-directory-p desktop-dir)
          (make-directory desktop-dir t))
        desktop-dir))
  
    (defun my-save-desktop ()
      "Save the desktop for the current projectile project."
      (when (projectile-project-p)
        (let ((desktop-dirname (my-desktop-path-for-project (projectile-project-root))))
          (desktop-save desktop-dirname))))
  
    (defun my-read-desktop ()
      "Read the desktop for the current projectile project."
      (when (projectile-project-p)
        (let ((desktop-dirname (my-desktop-path-for-project (projectile-project-root))))
          (desktop-read desktop-dirname))))
  
    (defun my-clean-old-desktop-files ()
      "Delete desktop files older than 6 months."
      (let ((current-time (float-time (current-time))))
        (dolist (file (directory-files "~/.emacs.d/desktops/" t "^[^.]"))
          (when (and (file-directory-p file)
                     (> (- current-time (float-time (nth 5 (file-attributes file))))
                        (* 6 30 24 60 60)))  ;; 6 months in seconds
            (delete-directory file t)))))
  
    ;; Hook to save desktop on project switch
    (add-hook 'projectile-after-switch-project-hook 'my-read-desktop)
    (add-hook 'kill-emacs-hook 'my-save-desktop)
  
    ;; Clean old desktop files periodically (once a day)
    (run-at-time "24 hours" 86400 'my-clean-old-desktop-files)
    
    ;; Define a custom function to list and kill project buffers
    (defun kill-project-buffers ()
      "Kill buffers that belong to the current project."
      (interactive)
      (let* ((project-root (projectile-project-root))
             (project-buffers (seq-filter
                               (lambda (buffer)
                                 (with-current-buffer buffer
                                   (and (projectile-project-p)
                                        (string-prefix-p project-root (buffer-file-name buffer)))))
                               (buffer-list))))
        (if project-buffers
            (kill-buffer (completing-read "Kill buffer: " (mapcar 'buffer-name project-buffers)))
          (message "No project buffers to kill"))))
  
    ;; Bind the custom function to C-x k
    (global-set-key (kbd "C-x k") 'kill-project-buffers))
  
  ;; Configuración de desktop
  (use-package desktop
    :ensure nil
    :init
    (desktop-save-mode 1)
    :custom
    (desktop-path '("~/.emacs.d/desktops/"))
    (desktop-dirname "~/.emacs.d/desktops/")
    (desktop-load-locked-desktop t)
    (desktop-auto-save-timeout 300))  ;; Guarda automáticamente cada 300 segundos  
    
  ;; Configuración de helm.
  (use-package helm
    :config
    (setq helm-display-buffer-height 45
          helm-autoresize-min-height 45
          helm-autoresize-max-height 45
          helm-split-window-inside-p t
          helm-split-window-default-side 'below)
    (helm-autoresize-mode 1)
    (helm-mode 1))
  
  (use-package helm-projectile
    :config
    (helm-projectile-on)
    :bind (("C-x b" . helm-projectile-switch-to-buffer)))   

  ;; Configuración de helm-rg.
  (use-package helm-rg
    :ensure t
    :config
    (setq helm-rg-default-directory 'git-root))  
  
  ;; ver achivos modificados
  (use-package helm-ls-git
    :ensure t
    :commands (helm-ls-git-ls))
  
  ;; Integración de Projectile con Counsel.
  (use-package counsel-projectile
    :config
    (counsel-projectile-mode))

   ;; Mejora la visualización de org-mode.
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))    

  ;; Búsqueda rápida por letras.
  (use-package avy
    :bind ("M-s" . avy-goto-char-2))  

  ;; Autocierre de paréntesis.
  (use-package smartparens
    :hook (prog-mode . smartparens-mode))
  
  ;; Notificaciones.
  (use-package alert
    :commands alert
    :config
    (setq alert-default-style 'notifications))
  
  ;; Guardar el historial de comandos.
  (use-package savehist
    :config
    (setq history-length 50)
    (savehist-mode 1))

  ;; Comentar líneas completas o seleccionadas.
  (use-package evil-nerd-commenter
    :bind ("C-/" . my/comment-and-move-down))  

  ;; Configuración de vterm-toggle.
  (use-package vterm-toggle
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   (reusable-frames . visible)
                   (window-height . 0.25)))
    (global-set-key (kbd "C-t") 'vterm-toggle))

  (defun open-vterm-in-project-root ()
    "Abrir vterm en el directorio raíz del proyecto."
    (interactive)
    (let ((default-directory (if (projectile-project-p)
                                 (projectile-project-root)
                               default-directory)))
      (vterm-toggle)))
  
  (global-set-key (kbd "C-t")
                  (lambda ()
                    (interactive)
                    (if (get-buffer-window "*vterm*")
                        (delete-window (get-buffer-window "*vterm*"))
                      (open-vterm-in-project-root))))
  
  ;; Configuración de multi-vterm para múltiples terminales.
  (use-package multi-vterm
    :config
    (global-set-key (kbd "C-x t") 'multi-vterm)
    (global-set-key (kbd "C-x T") 'multi-vterm-dedicated-toggle)
    (global-set-key (kbd "C-x p") 'multi-vterm-prev))  

  ;; Instalar y configurar undo-tree.
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode)
    :bind (("C-z" . undo-tree-undo)
           ("C-S-z" . undo-tree-redo))
    :config
    (define-key undo-tree-map (kbd "C-/") nil))
  
  ;; Borrar espacios en blanco.
  (use-package hungry-delete
    :config
    (global-hungry-delete-mode)
    (setq hungry-delete-join-reluctantly t))
  
  ;; Expansión de selección de región.
  (use-package expand-region
    :config
    (global-set-key (kbd "M-w") 'er/expand-region))  

  ;; Magit 
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status))
    :config
    (setq magit-save-repository-buffers 'dontask)
    (setq magit-revert-buffers 'silent)
    (setq magit-no-confirm '(stage-all-changes unstage-all-changes))
    (setq magit-diff-refine-hunk 'all))  

  (use-package forge
    :after magit)
  
  (use-package magit-todos
    :after magit
    :hook (magit-mode . magit-todos-mode))  

  (use-package diff-hl
    :ensure t
    :hook ((prog-mode . diff-hl-mode)
           (magit-post-refresh . diff-hl-magit-post-refresh)))  

  ;; WakaTime
  (use-package wakatime-mode
    :ensure t
    :config
    (setq wakatime-api-key (getenv "WAKATIME_API_KEY"))
    (setq wakatime-cli-path (getenv "/usr/bin/wakatime-cli"))
    (global-wakatime-mode))             

  ;; Configuración de treemacs.
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        t
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-read-string-input             'from-child-frame
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             nil
          treemacs-silent-filewatch              t
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-select-when-already-in-tree   t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-user-mode-line-format         nil
          treemacs-user-header-line-format       nil
          treemacs-width                         35)
  
      (treemacs-resize-icons 16)
  
      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'simple))
        (`(t . _)
         (treemacs-git-mode 'simple))))
  
   (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)  

  (use-package treemacs-icons-dired
    :after (treemacs dired)
    :ensure t
    :config (treemacs-icons-dired-mode))
  
  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)
  
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))
  
  (use-package treemacs-all-the-icons
    :after treemacs
    :ensure t
    :config
    (treemacs-load-theme "all-the-icons"))
  
  (with-eval-after-load 'treemacs
    (custom-set-faces
     '(treemacs-error-face ((t (:foreground "red"))))
     '(treemacs-warning-face ((t (:foreground "orange"))))
     '(treemacs-info-face ((t (:foreground "blue"))))))
  
  (add-hook 'projectile-after-switch-project-hook 'treemacs-projectile-toggle)

  ;; Multi cursor
  (use-package multiple-cursors
    :bind (("C-S-c C-S-c" . mc/edit-lines)
           ("M-n" . mc/mark-next-word-like-this)
           ("M-N" . mc/mark-next-like-this-word)
           ("M-p" . mc/mark-previous-word-like-this)
           ("M-P" . mc/mark-previous-like-this-word)
           ("C-M-n" . mc/mark-all-like-this)))

  ;; IDO mode
  (use-package ido
    :init
    (ido-mode))   

  ;; Ver cambios en los buffers.
  (use-package git-gutter
    :ensure t
    :hook (prog-mode . git-gutter-mode)
    :config
    (setq git-gutter:update-interval 0))    

;; Company mode para autocompletado
(use-package company
  :hook (after-init . global-company-mode)
  :config
  (setq company-minimum-prefix-length 0
        company-idle-delay 0
        company-selection-wrap-around t
        company-tooltip-align-annotations t
        company-dabbrev-downcase nil
        company-dabbrev-ignore-case nil
        company-dabbrev-code-ignore-case nil
        company-show-numbers t
        company-transformers '(company-sort-by-occurrence)
        completion-ignore-case t)
  (add-to-list 'company-backends 'company-capf)
  (define-key company-active-map [tab] 'company-complete-common-or-cycle)
  (define-key company-active-map (kbd "TAB") 'company-complete-selection)
  (define-key company-active-map (kbd "<tab>") 'company-complete-selection)
  (define-key company-active-map (kbd "C-n") 'company-select-next)
  (define-key company-active-map (kbd "C-p") 'company-select-previous)
  (define-key company-active-map (kbd "<escape>") 'company-abort)
  (define-key company-active-map (kbd "RET") nil)
  (define-key company-active-map (kbd "<return>") nil)
  (define-key company-active-map (kbd "M-RET") 'company-complete-selection))

(setq lsp-completion-provider :none)  ;; Usar company-capf para la autocompletación

  
  ;; Hook para esconder las sugerencias al perder el foco
  (add-hook 'focus-out-hook 'company-abort)

  (use-package company-box
    :hook (company-mode . company-box-mode)
    :ensure t)  
  
  ;; Instalar y configurar exec-path-from-shell
  (use-package exec-path-from-shell
    :ensure t
    :config
    ;; Asegúrate de que Emacs cargue las variables de entorno de la shell
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)
      ;; Carga variables específicas del archivo .bashrc
      (exec-path-from-shell-copy-envs '("PATH" "ANDROID_HOME" "ANDROID_SDK_ROOT" "CHROME_EXECUTABLE"))))  

  ;; Instalar y configurar yasnippet para snippets
  (use-package yasnippet
    :ensure t
    :hook (prog-mode . yas-global-mode))
  
  (use-package yasnippet-snippets
    :ensure t)

  ;; Configuración de company-quickhelp
  (use-package company-quickhelp
    :ensure t
    :config
    (setq company-quickhelp-delay 0.5) ; Tiempo de espera para mostrar la ayuda rápida
    (company-quickhelp-mode))  
    
    
      ;; Activar desktop-save-mode para guardar y restaurar la sesión
    (use-package desktop
      :ensure t
      :init
      (setq desktop-path '("~/.emacs.d/desktop/")
            desktop-dirname "~/.emacs.d/desktop/"
            desktop-base-file-name "emacs-desktop"
            desktop-base-lock-name "lock"
            desktop-restore-eager 10
            desktop-restore-frames t
            desktop-save t)
      :config
      ;; Crear el directorio si no existe
      (unless (file-exists-p desktop-dirname)
        (make-directory desktop-dirname t))
      (desktop-save-mode 1))
    
    ;; Eliminar initial-buffer-choice si está configurado
    (setq initial-buffer-choice nil)
    
    ;; Cerrar el buffer *scratch* al iniciar Emacs
    (add-hook 'emacs-startup-hook (lambda () (kill-buffer "*scratch*")))
    
    (use-package hide-mode-line
  :ensure t)

(defgroup my-customizations nil
  "Personalizacion para esconder el cursor."
  :group 'convenience)

(defcustom my-hide-cursor-delay 1
  "Demora en mostrar el cursor de nuevo."
  :type 'number
  :group 'my-customizations)

(defun my-hide-cursor ()
  "Esconder el cursor cuando estoy picando codigo."
  (interactive)
  (when (not (equal (current-buffer) (get-buffer "*Messages*")))
    (internal-show-cursor nil nil)
    (run-with-timer my-hide-cursor-delay nil 'show-cursor)))

(defun show-cursor ()
  "Mostrar el cursor."
  (interactive)
  (internal-show-cursor nil t))

(add-hook 'post-command-hook 'my-hide-cursor)

;; WakaTime
    (use-package wakatime-mode
       :ensure t
       :config
       (global-wakatime-mode))    
    
     ;; Permite cambiar de frame con Shift y las flechas.
  (windmove-default-keybindings)

  ;; Helm rg
  (global-set-key (kbd "C-c y") 'helm-rg)

  ;;Ver archivos modificados
  (global-set-key (kbd "C-x C-g") 'helm-ls-git-ls)  

  ;; Abrir proyecto exclusivo
   (global-set-key (kbd "M-1") 'treemacs-add-and-display-current-project-exclusively)

  ;; Copiar
  (global-set-key (kbd "C-c c") 'clipboard-kill-ring-save)
  
  ;; Cortar
  (global-set-key (kbd "C-c x") 'clipboard-kill-region)
  
  ;; Pegar
  (global-set-key (kbd "C-c v") 'clipboard-yank)
  
  ;; Seleccionar el área o función y trabajarla en un contenedor
  (global-set-key (kbd "C-x n n") 'narrow-or-widen-dwim) 

  (global-unset-key (kbd "M-<down-mouse-1>"))
  (global-set-key (kbd "M-<mouse-1>") 'mc/add-cursor-on-click)
  
  ;; Bookmark
  (global-set-key (kbd "C-c b s") 'bookmark-set)
  (global-set-key (kbd "C-c b j") 'bookmark-jump)
  (global-set-key (kbd "C-c b l") 'list-bookmarks)
  (global-set-key (kbd "C-c b d") 'bookmark-delete)
  (global-set-key (kbd "C-c b r") 'bookmark-rename)

  (global-set-key (kbd "M-d") 'duplicate-line)

  (global-set-key (kbd "<escape>") 'my/mc-quit-or-keyboard-quit)

  (global-set-key (kbd "C-<return>") 'my/open-line-below)
  (global-set-key (kbd "C-S-<return>") 'my/open-line-above)

  (global-set-key (kbd "M-S-<up>") 'move-line-up)
  (global-set-key (kbd "M-S-<down>") 'move-line-down)

  (global-set-key (kbd "M-/") 'my-comment-block)

  (global-set-key (kbd "RET") 'my/enter-inside-brackets-or-braces)
  (global-set-key (kbd "DEL") 'my/delete-opening-and-closing-brackets-or-braces)
  
  ;; Ir a definiciones
  (global-set-key (kbd "C-c g") 'lsp-find-definition)

  (global-set-key (kbd "C-x <right>") 'my-next-project-buffer)
  (global-set-key (kbd "C-x <left>") 'my-previous-project-buffer)

  ;; Cambiar al buffer *scratch*
  (global-set-key (kbd "C-0") 'cambia-a-buffer-para-notas)


;; Habilitar electric-indent-mode globalmente
  (electric-indent-mode 1)
  (electric-pair-mode 1)

  ;; Configurar RET para crear una nueva línea indentada
  (global-set-key (kbd "RET") 'newline-and-indent)

  (define-key projectile-mode-map (kbd "C-c u") 'helm-projectile)

  ;; Función para buscar archivos en el proyecto actual usando counsel-projectile-find-file
  (defun my-treemacs-projectile-find-file ()
    "Buscar archivos en el proyecto actual usando counsel-projectile-find-file."
    (interactive)
    (let ((project-root (projectile-project-root)))
      (if project-root
          (counsel-projectile-find-file)
        (message "No estás en un proyecto reconocido por Projectile."))))

  (with-eval-after-load 'treemacs
  (define-key treemacs-mode-map (kbd "SPC") 'my-treemacs-projectile-find-file))              

  (defun cambia-a-buffer-para-notas ()
    "Ir al buffer *scratch*."
    (interactive)
    (switch-to-buffer "*scratch*"))

  ;; Volver al buffer anterior donde se estaba trabajando
  (global-set-key (kbd "C-1") 'cambia-al-buffer-anterior)
  (defun cambia-al-buffer-anterior ()
    "Volver al último buffer en el que se estaba trabajando antes de cambiar de buffer."
    (interactive)
    (switch-to-buffer (other-buffer)))
  
  ;; Resaltar paréntesis coincidentes
  (define-advice show-paren-function (:around (fn) fix)
    "Resaltar paréntesis coincidentes."
    (cond ((looking-at "\\s(") (funcall fn))
          (t (save-excursion
               (ignore-errors (backward-up-list))
               (funcall fn)))))

  (defun my/helm-projectile-ignore-buffer (buffer)
  "Ignora buffers que no pertenecen al proyecto actual."
  (let ((bufname (buffer-name buffer)))
    (or (string-match-p "^\\*" bufname)
        (string-match-p "^magit" bufname)
        (string-match-p "^LSP" bufname))))

  (setq helm-boring-buffer-regexp-list '("\\*.*\\*" "magit.*" "LSP.*"))

  (defun my/comment-and-move-down ()
    "Comentar línea y moverse hacia abajo."
    (interactive)
    (evilnc-comment-or-uncomment-lines 1)
    (next-line 1))

  ;; Duplicar línea de código
  (defun duplicate-line ()
    "Duplicar la línea actual."
    (interactive)
    (let ((line-contents (buffer-substring (line-beginning-position) (line-end-position))))
      (end-of-line)
      (newline)
      (insert line-contents)))

  ;; Salir de multiple-cursors y otros modos con Escape
  (defvar my/escape-count 0
    "Cuenta el número de veces que se ha presionado Escape.")
  
  (defun my/reset-escape-count ()
    "Restablecer el contador de Escape."
    (setq my/escape-count 0))
  
  (defun my/mc-quit-or-keyboard-quit ()
    "Salir del modo multicursor o realizar un keyboard-quit."
    (interactive)
    (setq my/escape-count (1+ my/escape-count))
    (if (>= my/escape-count 3)
        (progn
          (keyboard-quit)
          (my/reset-escape-count))
      (if (and (boundp 'multiple-cursors-mode) multiple-cursors-mode)
          (mc/keyboard-quit)
        (keyboard-escape-quit))
      (when (company-tooltip-visible-p)
        (company-abort))))

  ;; Cerrar el buffer actual
  (defun close-current-buffer ()
    "Cerrar el buffer actual."
    (interactive)
    (kill-buffer (current-buffer)))
  
  (global-set-key (kbd "M-4") 'close-current-buffer)
  
  ;; Mover la línea actual hacia arriba
  (defun move-line-up ()
    "Mover la línea actual hacia arriba."
    (interactive)
    (transpose-lines 1)
    (forward-line -2))
  
  ;; Mover la línea actual hacia abajo
  (defun move-line-down ()
    "Mover la línea actual hacia abajo."
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1))      
  
  (add-hook 'post-command-hook 'my/reset-escape-count)  

  (defun my/open-line-above ()
    "Abrir una línea arriba."
    (interactive)
    (move-beginning-of-line nil)
    (newline-and-indent)
    (previous-line)
    (indent-according-to-mode))
  
  (defun my/open-line-below ()
    "Abrir una línea abajo."
    (interactive)
    (move-end-of-line nil)
    (newline-and-indent))  

  (defun my-comment-block ()
    "Insertar un bloque de comentarios según buenas prácticas."
    (interactive)
    (let ((current-line (thing-at-point 'line t)))
      (if (string-match "^[ \t]*\\*" current-line)
          (progn
            (end-of-line)
            (newline)
            (insert (concat (match-string 0 current-line) " ")))
        (insert "/*\n * \n */")
        (forward-line -1)
        (end-of-line))))
  (defun my/inside-empty-brackets-or-braces-p ()
    "Comprobar si el punto está dentro de corchetes o llaves vacíos en la misma línea."
    (let ((start-pos (point)))
      (save-excursion
        (and (re-search-backward "[[({]" (line-beginning-position) t)
             (progn (goto-char (match-end 0))
                    (looking-at-p "[])}]"))
             (= (1+ (match-beginning 0)) start-pos)))))
  
  (defun my/enter-inside-brackets-or-braces ()
    "Ejecutar una función si está dentro de corchetes o llaves vacíos en la misma línea."
    (interactive)
    (if (my/inside-empty-brackets-or-braces-p)
        (progn
          (newline)
          (my/open-line-above))
      (newline)))
  
  (defun my/delete-opening-and-closing-brackets-or-braces ()
    "Eliminar corchetes o llaves vacíos si están presentes."
    (interactive)
    (if (my/inside-empty-brackets-or-braces-p)
        (let ((start-pos (point)))
          (save-excursion
            (re-search-backward "[[({]" (line-beginning-position) t)
            (delete-char 1))
          (save-excursion
            (goto-char start-pos)
            (re-search-forward "[])}]" (line-end-position) t)
            (delete-char -1)))
      (delete-char -1)))         
      
  ;; Función para obtener los buffers del proyecto actual
  (defun my-project-buffers ()
    "Retornar una lista de buffers pertenecientes al proyecto actual."
    (let ((project-root (projectile-project-root)))
      (if project-root
          (cl-remove-if-not
           (lambda (buffer)
             (with-current-buffer buffer
               (and (buffer-file-name)
                    (string-prefix-p project-root (file-truename (buffer-file-name))))))
           (buffer-list))
        (buffer-list))))
  
  ;; Cambiar al siguiente buffer del proyecto
  (defun my-next-project-buffer ()
    "Cambiar al siguiente buffer en el proyecto actual."
    (interactive)
    (let ((buffers (my-project-buffers)))
      (if buffers
          (switch-to-buffer (nth (mod (1+ (cl-position (current-buffer) buffers)) (length buffers)) buffers))
        (next-buffer))))
  
  ;; Cambiar al buffer anterior del proyecto
  (defun my-previous-project-buffer ()
    "Cambiar al buffer anterior en el proyecto actual."
    (interactive)
    (let ((buffers (my-project-buffers)))
      (if buffers
          (switch-to-buffer (nth (mod (1- (cl-position (current-buffer) buffers)) (length buffers)) buffers))
        (previous-buffer))))

  ;; Para poder separar y modificar fácilmente un fragmento.
  (defun narrow-or-widen-dwim (p)
      "Widen if buffer is narrowed, narrow-dwim otherwise.
    Dwim means: region, org-src-block, org-subtree, or
    defun, whichever applies first. Narrowing to
    org-src-block actually calls `org-edit-src-code'.
    
    With prefix P, don't widen, just narrow even if buffer
    is already narrowed."
      (interactive "P")
      (declare (interactive-only))
      (cond ((and (buffer-narrowed-p) (not p)) (widen))
            ((region-active-p)
             (narrow-to-region (region-beginning)
                               (region-end)))
            ((derived-mode-p 'org-mode)
             (cond ((ignore-errors (org-edit-src-code) t)
                    (delete-other-windows))
                   ((ignore-errors (org-narrow-to-block) t))
                   (t (org-narrow-to-subtree))))
            ((derived-mode-p 'latex-mode)
             (LaTeX-narrow-to-environment))
            (t (narrow-to-defun))))     

  ;; Función para esconder las sugerencias con Escape
  (defun my/company-hide-suggestions ()
    (interactive)
    (company-abort))      

  ;; Opcional: configuración avanzada para mejorar la experiencia
  (defun my-reload-yasnippet ()
    "Recarga todos los fragmentos de yasnippet."
    (interactive)
    (yas-reload-all))
  
  ;; Asignar una tecla para recargar fragmentos, por ejemplo F5
  (global-set-key (kbd "<f5>") 'my-reload-yasnippet)   

  ;; === Activar chequeo ortográfico ===
  (setq ispell-dictionary "castellano")    ;set the default dictionary
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
  
  ;; === Activar botón derecho para cambiar palabra sugerida por chequeo ortográfico ===
  (eval-after-load "flyspell"
    '(progn
       (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
       (define-key flyspell-mouse-map [mouse-3] #'undefined)))
  
  ;; === cambiar idiomas de diccionario ortográfico ===
  (defun fd-switch-dictionary()
        (interactive)
        (let* ((dic ispell-current-dictionary)
      	 (change (if (string= dic "castellano") "english" "castellano")))
          (ispell-change-dictionary change)
          (message "Dictionary switched from %s to %s" dic change)
          ))
        (global-set-key (kbd "<f8>")   'fd-switch-dictionary)

  (defun my/projectile-flycheck-refresh ()
    "Refresh Flycheck in all project buffers."
    (when (projectile-project-p)
      (dolist (buffer (projectile-project-buffers))
        (with-current-buffer buffer
          (when (bound-and-true-p flycheck-mode)
            (flycheck-buffer))))))
  
  (add-hook 'after-save-hook 'my/projectile-flycheck-refresh)      


  ;; Instalar y configurar lsp-treemacs
  (use-package lsp-treemacs
    :ensure t
    :commands lsp-treemacs-errors-list
    :after lsp
    :config
    (lsp-treemacs-sync-mode 1))
  
  ;; Integrar flycheck con lsp-treemacs
  (use-package flycheck
    :ensure t
    :config
    (global-flycheck-mode))
  
  ;; LSP Mode
  (use-package lsp-mode
    :ensure t
    :hook ((prog-mode . (lambda ()
                          (unless (derived-mode-p 'emacs-lisp-mode)
                            (lsp))))
           (lsp-mode . lsp-ui-mode)
           (dart-mode . lsp))
    :commands lsp
    :config
    (setq lsp-enable-snippet t
          lsp-prefer-flymake nil ; Usa flycheck en lugar de flymake
          lsp-completion-provider :capf ;; Usar company-capf para la autocompletación
          lsp-idle-delay 0.5
          lsp-file-watch-threshold 10000
          lsp-diagnostic-package :flycheck))
  
  ;; Configuración de semgrep
  (lsp-register-client
   (make-lsp-client
    :new-connection (lsp-stdio-connection '("semgrep" "lsp" "--json"))
    :activation-fn (lsp-activate-on "dart")
    :server-id 'semgrep))
  
  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-sideline-enable nil
          lsp-ui-doc-enable t
          lsp-ui-doc-position 'top
          lsp-ui-sideline-update-mode 'point 
          lsp-ui-sideline-show-diagnostics t
          lsp-ui-sideline-show-hover t
          lsp-ui-sideline-show-code-actions nil
          lsp-ui-doc-include-signature t
          lsp-ui-doc-use-childframe t
          lsp-ui-doc-use-webkit nil))
  
  (defun my/lsp-ui-sideline-select-code-action ()
    "Mostrar un menú con las acciones de código disponibles."
    (interactive)
    (let ((actions (lsp-code-actions-at-point)))
      (if actions
          (let* ((action-strings (seq-map #'lsp:code-action-title actions))
                 (chosen-action (completing-read "Selecciona una acción: " action-strings nil t)))
            (when chosen-action
              (let ((action (seq-find (lambda (action)
                                        (string= (lsp:code-action-title action) chosen-action))
                                      actions)))
                (lsp-execute-code-action action))))
        (message "No hay acciones de código disponibles en este punto."))))
  
  (global-set-key (kbd "C-,") 'my/lsp-ui-sideline-select-code-action)
  
  (use-package lsp-ivy
    :ensure t
    :commands lsp-ivy-workspace-symbol)
  
  (use-package helm-lsp
    :ensure t
    :commands helm-lsp-workspace-symbol)
  
  (global-set-key (kbd "C-c l") 'lsp-command-prefix)

  (setq warning-minimum-level :error)
  
  (add-hook 'lsp-mode-hook
            (lambda ()
              (lsp-enable-which-key-integration)))

;; Configurar yaml-mode
  (use-package yaml-mode
    :ensure t
    :mode ("\\.\\(yml\\|yaml\\|lock\\)\\'" . yaml-mode)
    :config
    (add-hook 'yaml-mode-hook
              (lambda ()
                (define-key yaml-mode-map "\C-m" 'newline-and-indent))))     

;; Instalar all-the-icons
(use-package all-the-icons
  :if (display-graphic-p))

;; No mostrar el mensaje de bienvenida
(setq inhibit-startup-message t)

;; Cambiar la altura de las filas a 1.3 veces la altura de la fuente
(setq-default line-spacing 0.2)

;; Desactivar elementos visuales innecesarios
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
(set-fringe-mode 10)

;; Mejorar el uso del mouse
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-follow-mouse 't)
(setq scroll-step 1)
(setq use-dialog-box nil)

;; Cambiar el tipo de cursor a una barra vertical
(setq-default cursor-type 'bar)

;; Maximizar la pantalla al inicio
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; Mostrar el número de columna
(column-number-mode)

;; Resaltar la línea actual
(global-hl-line-mode 1)

;; Configuración de tabulaciones
(setq-default tab-width 4)
(setq-default evil-shift-width tab-width)
(setq-default indent-tabs-mode nil)

;; Permitir responder a preguntas críticas con 'y' o 'n'
(fset 'yes-or-no-p 'y-or-n-p)

;; Configuración UTF-8
(set-default-coding-systems 'utf-8)
(set-language-environment "UTF-8")

;; Usar ibuffer por defecto
(defalias 'list-buffers 'ibuffer)
(defalias 'list-buffers 'ibuffer-other-window)

;; Mostrar números de línea en modos relevantes
(dolist (mode '(text-mode-hook prog-mode-hook conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))

;; Guardar en el kill ring cosas de otros programas sin reemplazar lo de Emacs
(setq save-interprogram-paste-before-kill t)

;; Configuración para auto-recargar archivos modificados fuera de Emacs
(global-auto-revert-mode 1)
(setq auto-revert-verbose nil)
(global-set-key (kbd "<f5>") 'revert-buffer)

;; Configuración de ligatures
(use-package ligature
  :straight (ligature :type git :host github :repo "mickeynp/ligature.el")
  :config
  (ligature-set-ligatures 't '("www"))
  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
  (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                       "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                       "\\\\" "://"))
  (global-ligature-mode t))

(add-hook 'prog-mode-hook
          (lambda ()
            (setq-local whitespace-space-regexp "\\(^[ \t]+\\|[ \t]+$\\)")
            (whitespace-mode 1)))

(defun my-compilation-mode-hook ()
  "Configurar el modo de compilación para no truncar líneas."
  (setq truncate-lines nil)hl-
  (set (make-local-variable 'truncate-partial-width-windows) nil))
(add-hook 'compilation-mode-hook 'my-compilation-mode-hook)

;; Configuración del timbre visual
(setq visible-bell nil
      ring-bell-function 'double-flash-mode-line)

(defun double-flash-mode-line ()
  "Doble parpadeo del modo line."
  (let ((flash-sec (/ 1.0 20)))
    (invert-face 'mode-line)
    (run-with-timer flash-sec nil #'invert-face 'mode-line)
    (run-with-timer (* 2 flash-sec) nil #'invert-face 'mode-line)
    (run-with-timer (* 3 flash-sec) nil #'invert-face 'mode-line)))

;; Cerrar buffers no deseados al inicio
(defun close-unwanted-buffers ()
  "Cerrar los buffers no deseados al iniciar Emacs."
  (when (get-buffer "*Messages*")
    (kill-buffer "*Messages*"))
  (when (get-buffer "*straight-process*")
    (kill-buffer "*straight-process*")))

(add-hook 'emacs-startup-hook 'close-unwanted-buffers)

(delete-selection-mode 1)

;; Resaltar pares de paréntesis, corchetes o llaves.
(use-package paren
  :config
  (set-face-attribute 'show-paren-match-expression nil :background "#363e4a" :weight 'extra-bold)
  (set-face-attribute 'show-paren-match nil :background "#363e4a" :foreground "#ffffff" :weight 'extra-bold)
  (show-paren-mode 1))

;; Colorear pares de paréntesis, corchetes o llaves.
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))  

;; Eliminar espacios en blanco.
(use-package ws-butler
  :hook ((text-mode . ws-butler-mode)
         (prog-mode . ws-butler-mode)))  

;; Configuración de backups y undo history.
(defvar --backup-directory (concat user-emacs-directory "backups"))
(unless (file-exists-p --backup-directory)
  (make-directory --backup-directory t))
(setq backup-directory-alist `(("." . ,--backup-directory)))
(setq make-backup-files t
      backup-by-copying t
      version-control t
      delete-old-versions t
      delete-by-moving-to-trash t
      kept-old-versions 0
      kept-new-versions 7
      auto-save-default t
      auto-save-timeout 20
      auto-save-interval 200)

(defvar --undo-history-directory (concat user-emacs-directory "undos/")
  "Directorio para guardar el historico de undos")
(unless (file-exists-p --undo-history-directory)
  (make-directory --undo-history-directory t))
(setq undo-tree-history-directory-alist `(("." . ,--undo-history-directory)))

(setq backup-directory-alist `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))   


(use-package gruvbox-theme
  :straight t
  :config
  (load-theme 'gruvbox-dark-hard t))
#+end_src

** Modeline mejorada pero liviana: moody + minions
#+begin_src emacs-lisp
(column-number-mode t)
(line-number-mode t)
(set-face-attribute 'mode-line nil :height 100)
(set-face-attribute 'mode-line-inactive nil :height 100)
#+end_src

** Modeline por defecto extendida
#+begin_src emacs-lisp
(setq-default mode-line-format
  '((:eval
     (list " "
           mode-line-buffer-identification
           "   "
           mode-line-position
           "   "
           mode-line-modes
           "   "
           (format " [%s | %s | %s]"
                   (symbol-name buffer-file-coding-system)
                   (symbol-name buffer-file-format)
                   (symbol-name system-type))))))
#+end_src

** Iconos: nerd-icons
#+begin_src emacs-lisp
(use-package nerd-icons
  :straight t)
#+end_src

** Fuente profesional con ligaduras: JetBrains Mono + ligature.el
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "JetBrains Mono" :height 110)

(use-package ligature
  :straight t
  :config
  (ligature-set-ligatures 't '("www" "**" "***" "==" "!=" "===" "=>" "->" "<-" "<=" ">=" "&&" "||" "::" "!!"))
  (global-ligature-mode t))
#+end_src

** Minions: agrupar modos menores en la modeline
#+begin_src emacs-lisp
(use-package minions
  :straight t
  :config
  (minions-mode 1))
#+end_src

#+begin_src emacs-lisp
(use-package pulsar
  :straight t
  :config
  (setq pulsar-pulse t
        pulsar-delay 0.055
        pulsar-iterations 10
        pulsar-face 'pulsar-magenta
        pulsar-highlight-face 'pulsar-yellow)
  (pulsar-global-mode 1)
  (dolist (command '(recenter-top-bottom move-to-window-line-top-bottom
                                          reposition-window bookmark-jump
                                          other-window delete-window
                                          delete-other-windows forward-page
                                          backward-page scroll-up-command
                                          scroll-down-command windmove-right
                                          windmove-left windmove-up windmove-down
                                          org-next-visible-heading org-previous-visible-heading
                                          org-forward-heading-same-level org-backward-heading-same-level
                                          outline-next-visible-heading outline-previous-visible-heading))
    (add-to-list 'pulsar-pulse-functions command)))
#+end_src

* Comportamiento visual adicional

** Resaltado de TODOs y palabras clave
#+begin_src emacs-lisp
(use-package hl-todo
  :straight t
  :config
  (global-hl-todo-mode t)
  (setq hl-todo-keyword-faces '(("TODO" . "#FF0000")
                                ("FIXME" . "#FF4500")
                                ("DEBUG" . "#A020F0")
                                ("HARDCODE" . "#FFD700")
                                ("STUB" . "#1E90FF")
                                ("NOTE" . "#FFD700")
                                ("HACK" . "#A020F0")
                                ("REVIEW" . "#FFD700")
                                ("BUG" . "#FF6347")
                                ("DEPRECATED" . "#FFD700"))))
#+end_src

** Paréntesis visibles, delimitadores de colores y limpieza de espacios
#+begin_src emacs-lisp
(use-package paren
  :config
  (set-face-attribute 'show-paren-match-expression nil :background "#363e4a" :weight 'extra-bold)
  (set-face-attribute 'show-paren-match nil :background "#363e4a" :foreground "#ffffff" :weight 'extra-bold)
  (show-paren-mode 1))

(use-package rainbow-delimiters
  :straight t
  :hook (prog-mode . rainbow-delimiters-mode))

;;(use-package ws-butler
;;  :straight t
;;  :hook ((text-mode . ws-butler-mode)
;;         (prog-mode . ws-butler-mode)))
#+end_src

** Timbre visual con doble parpadeo en la modeline
#+begin_src emacs-lisp
(setq visible-bell nil
      ring-bell-function 'double-flash-mode-line)

(defun double-flash-mode-line ()
  "Doble parpadeo del modo line."
  (let ((flash-sec (/ 1.0 20)))
    (invert-face 'mode-line)
    (run-with-timer flash-sec nil #'invert-face 'mode-line)
    (run-with-timer (* 2 flash-sec) nil #'invert-face 'mode-line)
    (run-with-timer (* 3 flash-sec) nil #'invert-face 'mode-line)))
#+end_src

** Números de línea relativos y visualización de espacios
#+begin_src emacs-lisp
(dolist (mode '(text-mode-hook prog-mode-hook conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))
(setq display-line-numbers-type 'relative)

(setq whitespace-display-mappings '((space-mark 32 [183] [46])
                                    (space-mark 160 [164] [95])
                                    (tab-mark 9 [187 9] [92 9])))

(setq whitespace-style '(face trailing tabs newline missing-newline-at-eof empty indentation space-after-tab space-before-tab space-mark tab-mark newline-mark))

(global-whitespace-mode t)
(global-whitespace-newline-mode t)

(custom-set-faces
 '(whitespace-space ((t (:background nil :foreground nil))))
 '(whitespace-hspace ((t (:background nil :foreground "white"))))
 '(whitespace-tab ((t (:background nil :foreground "white"))))
 '(whitespace-newline ((t (:background nil :foreground "white"))))
 '(whitespace-trailing ((t (:background nil :foreground "white"))))
 '(whitespace-line ((t (:background nil :foreground "white"))))
 '(whitespace-space-before-tab ((t (:background nil :foreground "white"))))
 '(whitespace-indentation ((t (:background nil :foreground "white"))))
 '(whitespace-empty ((t (:background nil :foreground "white"))))
 '(whitespace-space-after-tab ((t (:background nil :foreground "white")))))
#+end_src

* Dashboard Configuration

** page-break-lines
#+begin_src emacs-lisp
(use-package page-break-lines
  :straight t
  :hook (dashboard-mode . page-break-lines-mode))
#+end_src

** dashboard.el
#+begin_src emacs-lisp
(use-package dashboard
  :straight t
  :config
  (setq dashboard-startup-banner (expand-file-name "assets/logo_demacs.png" user-emacs-directory)
        dashboard-banner-logo-title "demacs — Minimalista. Modular. Científico."
        dashboard-footer-messages '("Memento Mori" "Amor Fati" "Data > Opinions" "")
        dashboard-items '((recents  . 5)
                          (projects . 5)
                          (agenda   . 5))
        dashboard-center-content t
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-show-shortcuts nil)
  (dashboard-setup-startup-hook))
#+end_src

** Completado y minibuffer moderno
#+begin_src emacs-lisp
(use-package vertico
  :straight t
  :init
  (vertico-mode 1))

(use-package orderless
  :straight t
  :init
  (setq completion-styles '(orderless)))

(use-package marginalia
  :straight t
  :init
  (marginalia-mode))

(use-package consult
  :straight t)
#+end_src


