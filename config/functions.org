#+TITLE: functions.org
#+PROPERTY: header-args:emacs-lisp :tangle yes :results silent

* Funcion para probar paquetes
#+begin_src emacs-lisp
(defun jinxx/try-straight (pkg)
  "Instalar y cargar temporalmente PKG con straight.el."
  (interactive "SNombre del paquete: ")
  (straight-use-package pkg)
  (require pkg nil 'noerror)
  (message "Paquete %s instalado temporalmente con straight." pkg))
#+end_src

* Funcion para editar codigo en org-mode segun ventana completa o por defecto de org
#+begin_src emacs-lisp
(defun jinxx/org-edit-src-current-window ()
  "Editar bloque en la misma ventana completa."
  (interactive)
  (let ((org-src-window-setup 'current-window))
    (org-edit-special)))

(defun jinxx/org-edit-src-default ()
  "Editar bloque usando la configuración por defecto de Org."
  (interactive)
  (let ((org-src-window-setup 'reorganize-frame)) ;; valor default
    (org-edit-special)))
#+end_src    

* Funcion para treemacs
#+begin_src emacs-lisp
(defun jinxx/treemacs-smart ()
  "Si Treemacs no está visible → abrirlo.
  Si está visible pero no es la ventana activa -> seleccionarlo.
  Si ya es la ventana activa → ocultarlo."
  (interactive)
  (let ((win (catch 'found
               (dolist (w (window-list))
                 (with-current-buffer (window-buffer w)
                   (when (derived-mode-p 'treemacs-mode)
                     (throw 'found w))))
               nil)))
    (cond
     ((null win)              (treemacs))
     ((eq win (selected-window)) (treemacs))
     (t                       (select-window win)))))
#+end_src

* Helpers de formateo
#+begin_src emacs-lisp
(defun jinxx/apheleia-skip-large-file ()
  "Evita correr formatters en buffers muy grandes."
  (let ((limit (* 1 1024 1024)))
    (> (buffer-size) limit)))
#+end_src

* Term
#+begin_src emacs-lisp
(defun jinxx/vterm-toggle-project ()
  "Toggle vterm en panel inferior, haciendo cd al root del proyecto."
  (interactive)
  (let* ((pr (when (fboundp 'project-current) (project-current)))
         (dir (if pr (project-root pr) default-directory)))
    (let ((default-directory dir))
      (vterm-toggle-cd))))
#+end_src

* Helper para usar Eglot + Cape
#+begin_src emacs-lisp
;; Combina el CAPF de Eglot con dabbrev/file/keyword de Cape sin pisarlo
(defun jinxx/setup-capf-eglot+cape ()
  "Super-CAPF: Eglot + dabbrev + file + keyword."
  (setq-local completion-at-point-functions
              (list (cape-capf-super
                     #'eglot-completion-at-point
                     #'cape-dabbrev
                     #'cape-file
                     #'cape-keyword))))

(add-hook 'eglot-managed-mode-hook #'jinxx/setup-capf-eglot+cape)
#+end_src

* Helper para instalar gramáticas de Tree-sitter
#+begin_src emacs-lisp
  (defun jinxx/install-treesit-grammars ()
    "Asegura que las gramáticas de Tree-sitter para ciencia de datos estén instaladas."
    (interactive)
    (when (fboundp 'treesit-install-language-grammar)
      (let ((grammars-to-install '(python r julia json yaml toml bash)))
        (dolist (lang grammars-to-install)
          (unless (treesit-language-available-p lang)
            (message "Instalando gramática de Tree-sitter para: %s" lang)
            (treesit-install-language-grammar lang))))))
#+end_src

* Treemacs que se mueva con projectile
#+begin_src emacs-lisp
(with-eval-after-load 'projectile
  (add-hook 'projectile-after-switch-project-hook
            (defun jinxx/treemacs-on-projectile-switch ()
              (when (require 'treemacs nil t)
                (if (treemacs-current-visibility)
                    (treemacs-display-current-project-exclusively)
                  )))))

(with-eval-after-load 'treemacs
  (treemacs-follow-mode 1))
#+end_src


* Confirmación
#+begin_src emacs-lisp
(message "functions.org cargado")
#+end_src
