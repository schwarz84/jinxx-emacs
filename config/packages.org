#+TITLE: packages.org
#+PROPERTY: header-args:emacs-lisp :tangle yes :results silent

* Core UX
#+begin_src emacs-lisp
;; which-key: muestra las teclas disponibles tras un prefijo.
(use-package which-key
  :demand t
  :hook (after-init . which-key-mode)
  :custom
  (which-key-idle-delay 0.4))

;; Ivy: completado ligero para todo el minibuffer.
(use-package ivy
  :demand t
  :diminish
  :hook (after-init . ivy-mode)
  :bind (:map ivy-minibuffer-map
         ("C-n" . ivy-next-line)
         ("C-p" . ivy-previous-line)
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         :map ivy-switch-buffer-map
         ("C-n" . ivy-next-line)
         ("C-p" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-n" . ivy-next-line)
         ("C-p" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :custom
  (ivy-use-virtual-buffers t)
  (ivy-count-format "(%d/%d) "))

;; Counsel: comandos enriquecidos con interfaz Ivy
(use-package counsel
  :demand t
  :after ivy
  :bind (("M-x"     . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("M-y"     . counsel-yank-pop)
         ("C-x b"   . counsel-switch-buffer)
         ("C-x C-r" . counsel-recentf)
         ("C-c k"   . counsel-rg)
         ("C-h v"   . counsel-describe-variable)
         ("C-h f"   . counsel-describe-function)
         ("C-h b"   . counsel-descbinds)
	 ("C-c b"   . counsel-bookmark)
         :map minibuffer-local-map
         ("C-r" . counsel-minibuffer-history))
  :config
  (setq ivy-initial-inputs-alist nil)
  (setq counsel-find-file-ignore-regexp
         "\\(?:__pycache__/\\|\\.ipynb_checkpoints/\\)"))

;; Helpful: buffers de ayuda enriquecidos, integrados con Counsel
(use-package helpful
  :after counsel
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . helpful-function)
  ([remap describe-symbol]   . helpful-symbol)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-command]  . helpful-command)
  ([remap describe-key]      . helpful-key))

;; Swiper: búsqueda incremental en buffer con interfaz Ivy
(use-package swiper
  :after ivy
  :bind (("C-S-s"     . swiper-isearch)
         ("C-r"     . swiper-isearch-backward)
         ("C-s"   . swiper)
         ("M-s ."   . swiper-thing-at-point))
  :custom
  (swiper-goto-start-of-match t)
  (swiper-action-recenter t))

;; Ivy-Rich: columnas extra (modo, proyecto, ruta, tamaño, etc.) en Ivy/Counsel
(use-package ivy-rich
  :demand t
  :after (counsel projectile)
  :init
  (ivy-rich-mode 1)
  :custom
  (ivy-format-functions-alist
   '((t . ivy-format-function-line)))
  ;; Rutas abreviadas (~/… en lugar de /home/…)
  (ivy-rich-path-style 'abbrev)
  ;; Cachea el root del proyecto para acelerar switch-buffer en repos grandes
  :config
  (when (fboundp 'ivy-rich-project-root-cache-mode)
    (ivy-rich-project-root-cache-mode +1)))

(use-package ivy-xref
  :after ivy
  :init
  (setq xref-show-xrefs-function        #'ivy-xref-show-xrefs
        xref-show-definitions-function  #'ivy-xref-show-defs))

;; Smex: prioriza los comandos más usados en M-x (lo aprovecha counsel-M-x)
(use-package smex
  :after counsel
  :init
  (smex-initialize)
  :custom
  (smex-save-file (expand-file-name "var/smex-items" user-emacs-directory)))

;; prescient: ranking por uso (frecencia) + persistencia del historial
(use-package prescient
  :demand t
  :custom
  (prescient-save-file (expand-file-name "var/prescient-save.el" user-emacs-directory))
  :config
  (prescient-persist-mode +1))

;; ivy-prescient: aplica ese ranking y (opcionalmente) filtrado en Ivy/Counsel
(use-package ivy-prescient
  :after (ivy prescient)
  :custom
  (ivy-prescient-enable-sorting t)
  (ivy-prescient-enable-filtering t)
  :config
  (ivy-prescient-mode +1))

;; Whitespaces para que se vean
(use-package whitespace
  :init
  (setq whitespace-style '(face space-mark trailing))
  (setq whitespace-display-mappings '((space-mark 32 [183] [46])))
  (setq whitespace-space-regexp "\\(^ +\\| +$\\)")
  :hook ((prog-mode . whitespace-mode)))

;; wgrep: editar resultados de grep/rg directamente y aplicar cambios a los archivos
(use-package wgrep
  :after counsel
  :commands (wgrep-change-to-wgrep-mode)
  :config
  ;; Hace que al guardar con C-x C-s se apliquen los cambios sin preguntar
  (setq wgrep-auto-save-buffer t))

;; Selección incremental
(use-package expand-region
  :after treesit
  :commands (er/expand-region er/contract-region)
  :bind (("C-=" . er/expand-region)
         ("C--" . er/contract-region))
  :custom
  (expand-region-fast-keys-enabled t)
  (expand-region-contract-fast-key "-")
  (expand-region-reset-fast-key "0")
  (expand-region-skip-whitespace t)
  (expand-region-smart-cursor t)
  (expand-region-subword-enabled t))

;; winner-mode deshacer/rehacer disposición de ventanas
(use-package winner
  :init
  (winner-mode 1))

;; spatial-navigate — YAML / Python / JSON, sin minor-mode
(use-package spatial-navigate
  :init
  (dolist (hk '(yaml-mode-hook yaml-ts-mode-hook
                 python-mode-hook python-ts-mode-hook
                 json-mode-hook json-ts-mode-hook))
    (add-hook hk
              (lambda ()
                (local-set-key (kbd "M-S-<up>")    #'spatial-navigate-backward-vertical-box)
                (local-set-key (kbd "M-S-<down>")  #'spatial-navigate-forward-vertical-box)
                (local-set-key (kbd "M-S-<left>")  #'spatial-navigate-backward-horizontal-box)
                (local-set-key (kbd "M-S-<right>") #'spatial-navigate-forward-horizontal-box)))))
#+end_src

* Proyectos, tree y arhcivos
#+begin_src emacs-lisp
;; Projectile con Ivy como frontend
(use-package projectile
  :demand t
  :custom
  	(projectile-completion-system 'ivy)
  	(projectile-indexing-method 'alien)
  	(projectile-enable-caching t)
  :bind-keymap
  	("C-c p" . projectile-command-map)   ;; <-- evita el void-variable
  :init
  	(setq projectile-project-search-path '("~/Proyectos" "~/Sandbox"))
  :config
  	(projectile-mode 1))

;; Counsel projectile
(use-package counsel-projectile
  :after (projectile counsel)
  :init
  (setq projectile-switch-project-action #'counsel-projectile)
  :bind
  (:map projectile-command-map
        ("p" . counsel-projectile-switch-project)   ;; C-c p p
        ("f" . counsel-projectile-find-file)        ;; C-c p f
        ("r" . counsel-projectile-recentf)          ;; C-c p r
        ("g" . counsel-projectile-rg)               ;; C-c p g
        ("b" . counsel-projectile-switch-to-buffer) ;; C-c p b
        ("k" . project-kill-buffers)                ;; C-c p k
        ("i" . projectile-invalidate-cache))        ;; C-c p i
  :config
  (counsel-projectile-mode 1))

;; Treemacs
(use-package treemacs
  :commands (treemacs treemacs-select-window)
  :init
  (setq treemacs-width 25
        treemacs-position 'left
        treemacs-is-never-other-window t
        treemacs-indentation 1)
  :config
  (treemacs-follow-mode 1)
  (treemacs-filewatch-mode 1)
  (treemacs-git-mode 'deferred)
  (treemacs-resize-icons 13))

(use-package treemacs-projectile :after (treemacs projectile))

;; Nerd Icons 
(use-package nerd-icons
  :init
  (setq nerd-icons-scale-factor 0.5))

(use-package treemacs-nerd-icons
  :after (treemacs nerd-icons)
  :config
  (treemacs-load-theme "nerd-icons"))

;; Sesión global persistente
(use-package desktop
  :ensure nil
  :demand t
  :init
  (let ((dir (expand-file-name "var/desktop/" user-emacs-directory)))
    (setq desktop-dirname             dir
          desktop-path                (list dir)
          desktop-save                t
          desktop-auto-save-timeout   60
          desktop-load-locked-desktop t)
    (unless (file-directory-p dir) (make-directory dir t)))
  :config
  (desktop-save-mode 1)
  (add-hook 'kill-emacs-hook #'desktop-save-in-desktop-dir))

;; Treemacs Magit: actualizar estados Git tras stage/commit desde Magit
(use-package treemacs-magit
  :after (treemacs magit))
#+end_src

* Terminales y multi term
#+begin_src emacs-lisp
;; vterm + multi-vterm (igual que ya tenés)
(use-package vterm
  :commands (vterm)
  :custom
  (vterm-shell (or (getenv "SHELL") "/bin/bash"))
  (vterm-max-scrollback 5000)
  (vterm-kill-buffer-on-exit t))

;; multi-vterm: agrego el comando project
(use-package multi-vterm
  :after vterm
  :commands (multi-vterm multi-vterm-next multi-vterm-prev multi-vterm-project))

;; vterm-toggle: panel inferior fijo (30%)
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  ;; Mostrar SIEMPRE los buffers vterm en una ventana lateral abajo (30%):
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                   (let ((buf (get-buffer buffer-or-name)))
                     (with-current-buffer buf
                       (or (derived-mode-p 'vterm-mode)
                           (string-prefix-p vterm-buffer-name (buffer-name buf))))))
                 (display-buffer-reuse-window display-buffer-in-side-window)
                 (side . bottom)
                 (reusable-frames . visible)
                 (window-height . 0.3))))
#+end_src

* Git y revision
#+begin_src emacs-lisp
;; Magit: interfaz Git completa
(use-package magit
  :commands (magit-status magit-dispatch magit-file-dispatch magit-list-repositories)
  :custom
  ;; Ventanas: todo en la misma, menos los diffs
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
  ;; Guardar buffers del repo sin preguntar antes de refrescar/operar
  (magit-save-repository-buffers 'dontask)
  ;; Directorios a escanear para magit-list-repositories
  (magit-repository-directories '(("~/Proyectos" . 2) ("~/Sandbox" . 1))))

;; Forge
(use-package forge
  :after magit)

;; magit-todos
(use-package magit-todos
  :after magit
  :hook (magit-status-mode . magit-todos-mode)
  :custom
  (magit-todos-keywords '("TODO" "FIXME" "BUG" "HACK" "REVIEW" "NOTE")))

;; diff-hl: marcas en el fringe + navegación/revert por hunk
(use-package diff-hl
  :demand t 
  :hook ((dired-mode . diff-hl-dired-mode)
         (magit-post-refresh . diff-hl-magit-post-refresh))
  :config
  (global-diff-hl-mode 1)    ;; resalta cambios en todos los buffers versionados
  (diff-hl-flydiff-mode 1))  ;; actualiza “on the fly” sin guardar

(use-package hl-todo
  :demand t
  :hook (after-init . global-hl-todo-mode)
  :bind (("C-c h n" . hl-todo-next)
         ("C-c h p" . hl-todo-previous)
         ("C-c h o" . hl-todo-occur)          ;; TODOs del buffer (usa occur)
         ("C-c h g" . (lambda ()               ;; TODOs del proyecto (usa ripgrep vía counsel)
                        (interactive)
                        (counsel-rg "TODO\\|FIXME\\|HACK\\|REVIEW\\|DEPRECATED\\|BUG\\|NOTE\\|WIP"))))
  :custom
  ;; Paleta gruvbox (contraste con dark-hard)
  (hl-todo-keyword-faces
   '(("TODO"       . "#fb4934")  ;; red
     ("FIXME"      . "#fb4934")
     ("BUG"        . "#cc241d")
     ("HACK"       . "#fe8019")  ;; orange
     ("REVIEW"     . "#fabd2f")  ;; yellow
     ("DEPRECATED" . "#d3869b")  ;; purple
     ("NOTE"       . "#83a598")  ;; blue
     ("WIP"        . "#8ec07c")  ;; aqua
     ("XXX"        . "#d3869b")
     ("DONE"       . "#b8bb26"))))

(use-package pulsar
  :demand t
  :init
  (setq pulsar-pulse t
        pulsar-delay 0.055
        pulsar-iterations 8
        pulsar-face 'pulsar-cyan
        pulsar-highlight-face 'pulsar-yellow
        pulsar-resolve-pulse-function-aliases t)
  :hook
  ((after-init . pulsar-global-mode)
   (next-error . pulsar-pulse-line))
  :bind (("C-c u p" . pulsar-pulse-line)
         ("C-c u h" . pulsar-highlight-line))
  :config
  ;; Amplío triggers para tu stack Ivy/Counsel + navegación
  (dolist (fn '(recenter-top-bottom
                other-window
                windmove-up windmove-down windmove-left windmove-right
                avy-goto-char-timer
                swiper swiper-isearch swiper-isearch-backward
                counsel-rg counsel-imenu counsel-switch-buffer
                xref-find-definitions xref-pop-marker-stack
                bookmark-jump next-error previous-error))
    (add-to-list 'pulsar-pulse-functions fn)))
#+end_src

* Edicion productiva
#+begin_src emacs-lisp
;; crux: utilidades prácticas de edición y archivos
(use-package crux
  :bind
  ([remap move-beginning-of-line] . crux-move-beginning-of-line)
  (("C-c x d" . crux-duplicate-current-line-or-region)
   ("C-c x c" . crux-duplicate-and-comment-current-line-or-region)
   ("C-c x o" . crux-smart-open-line)
   ("C-c x O" . crux-smart-open-line-above)
   ("C-c x k" . crux-smart-kill-line)
   ("C-c x K" . crux-kill-other-buffers)
   ("C-c x r" . crux-rename-file-and-buffer)
   ("C-c x D" . crux-delete-file-and-buffer)
   ("C-c x n" . crux-cleanup-buffer-or-region)
   ("C-c x I" . crux-find-user-init-file)))

;; multiple-cursors: edición paralela
(use-package multiple-cursors
  :init
  (setq mc/always-run-for-all t)
  (setq mc/list-file (expand-file-name "var/.mc-lists.el" user-emacs-directory))
  :bind (("C-c m l" . mc/edit-lines)
         ("C-c m b" . mc/edit-beginnings-of-lines)
         ("C-c m e" . mc/edit-ends-of-lines)
         ("C->"     . mc/mark-next-like-this)
         ("C-<"     . mc/mark-previous-like-this)
         ("C-c m a" . mc/mark-all-like-this)
         ("C-c m r" . set-rectangular-region-anchor)))

;; avy: saltos rápidos
(use-package avy
  :bind ( :map search-map
          ("a" . avy-goto-char-timer)
          ("l" . avy-goto-line)
          ("w" . avy-goto-word-1))
  :custom
  (avy-background t)
  (avy-timeout-seconds 0.35))

;; smartparens
(use-package smartparens
  :after org
  :hook ((prog-mode . smartparens-mode)
         (org-mode  . smartparens-mode))
  :config
  (require 'smartparens-config)
  (show-smartparens-global-mode 1)
  (add-hook 'smartparens-mode-hook (lambda () (electric-pair-local-mode -1))))

;; Snippets
(use-package yasnippet
  :hook ((prog-mode . yas-minor-mode)
         (org-mode  . yas-minor-mode))
  :init
  ;; Tu colección personal primero, después la de comunidad
  (setq yas-snippet-dirs
        (list (expand-file-name "snippets" user-emacs-directory)
              (expand-file-name "straight/repos/yasnippet-snippets/snippets"
                                user-emacs-directory)))
  :config
  (yas-reload-all))

(use-package yasnippet-snippets
  :after yasnippet)

;; Apheleia: formateo asíncrono, estable al punto
(use-package apheleia
  :demand t
  :init
  (with-eval-after-load 'apheleia
    (setf (alist-get 'isort apheleia-formatters) '("isort" "--stdout" "-"))
    (setf (alist-get 'python-mode apheleia-mode-alist) '(isort black)))
  :config
  (apheleia-global-mode +1)
  (add-hook 'apheleia-skip-functions #'jinxx/apheleia-skip-large-file))

;; Mover línea o región arriba/abajo (estilo IDE)
(use-package move-text
  :bind (("M-S-<up>"   . move-text-up)
         ("M-S-<down>" . move-text-down))
  :config
  (move-text-default-bindings))

;; ws-butler — limpia espacios finales SOLO en líneas editadas
;;(use-package ws-butler
;;  :hook (prog-mode . ws-butler-mode))
#+end_src

* Lenguajes y datos
#+begin_src emacs-lisp
;; Markdown: edición de archivos .md
(use-package markdown-mode
  :mode ("\\.md\\'" . gfm-mode))
#+end_src

* Leer archivos cvs grandes y pequenios
#+begin_src emacs-lisp
;; CSV/TSV
(use-package csv-mode
  :mode (("\\.csv\\'" . csv-mode)
         ("\\.tsv\\'" . tsv-mode))
  :init
    (setq csv-separators '("," ";" "\t"))
  :bind (:map csv-mode-map
              ;; Alinear/desalinear (manual oficial)
              ("C-c C-a" . csv-align-fields)
              ("C-c C-u" . csv-unalign-fields)
              ;; Opcionales útiles:
              ("C-c C-s" . csv-sort-fields)
              ("C-c C-n" . csv-sort-numeric-fields))
  :config
  (add-hook 'csv-mode-hook (lambda () (setq-local truncate-lines t))))

;; VLF: ver/editar/buscar archivos ENORMES por chunks 
(use-package vlf
  :demand t
  :init
  (require 'vlf-setup)  ;; integra con find-file: te ofrece abrir con VLF si es grande
   (setq vlf-application 'dont-ask) )
#+end_src

* Undo predecible + histórico entre sesiones + árbol visual (recomendado)
#+begin_src emacs-lisp
;; Límites razonables
(setq undo-limit 800000
      undo-strong-limit 12000000
      undo-outer-limit 128000000)

;; Undo/Redo lineal sobre el backend nativo
(use-package undo-fu
  :bind (("C-/" . undo-fu-only-undo)     ;; deshacer
         ("C-?" . undo-fu-only-redo)))   ;; rehacer (C-S-/)

;; Historial de undo entre sesiones (a disco)
(use-package undo-fu-session
  :after undo-fu
  :init
  (setq undo-fu-session-directory
        (expand-file-name "var/undo/" user-emacs-directory)
        undo-fu-session-linear t)        ;; guarda lineal, sin ramas
  :config
  (undo-fu-session-global-mode 1))

;; Arbol visual
(use-package vundo
  :commands (vundo)
  :bind (("C-x u" . vundo))               ;; abrí el árbol cuando lo necesites
  :config
  (setq vundo-glyph-alist vundo-unicode-symbols
        vundo-compact-display t))
#+end_src

* IDE Minimo
#+begin_src emacs-lisp
(use-package corfu
  :demand t
  :init
  (setq corfu-auto t          ;; popup automático (desactivá si preferís M-TAB manual)
        corfu-auto-delay 0.15
        corfu-auto-prefix 2
        corfu-quit-no-match t
        corfu-scroll-margin 4)
  (global-corfu-mode 1))

;; Tooltips de documentación en el popup (builtin en Corfu)
(with-eval-after-load 'corfu
  (setq corfu-popupinfo-delay 0.25)
  (corfu-popupinfo-mode 1))

;; CAPE: fuentes extra (dabbrev, archivos, keywords) que se combinan con Eglot
(use-package cape
  :commands (cape-dabbrev cape-file cape-keyword cape-capf-super))

;; Eglot: cliente LSP builtin
(use-package eglot
  :commands (eglot eglot-ensure)
  :hook ((python-mode python-ts-mode
          ess-r-mode  r-mode
          julia-mode  julia-ts-mode)
         . eglot-ensure)
  :init
  (setq eglot-autoshutdown t)
  :config
  (add-to-list 'eglot-server-programs
               '((python-mode python-ts-mode)
                 . ("basedpyright-langserver" "--stdio")))
  ;; R languageserver 
  (add-to-list 'eglot-server-programs
               '((ess-r-mode r-mode)
                 . ("R" "--slave" "-e" "languageserver::run()")))
  ;; Julia LanguageServer.jl
  (add-to-list 'eglot-server-programs
               '((julia-mode julia-ts-mode)
                 . ("julia" "--startup-file=no" "--history-file=no"
                    "-e" "using LanguageServer,SymbolServer; runserver()"))))

;;; ---- Debug (opcional, on-demand) ----
(use-package dap-mode
  :after eglot
  :commands (dap-debug dap-debug-last dap-breakpoint-toggle)
  :init
  ;; Config mínima: no UI pesada; sólo lo útil cuando se invoque
  (setq dap-auto-configure-features '(sessions locals controls tooltip))
  :config
  (dap-auto-configure-mode 1)   ;; respeta la lista de features de arriba
  ;; Python con debugpy
  (require 'dap-python)
  ;; Si usás conda/venv, dejá que tome "python" del entorno activo
  ;; (setq dap-python-executable "python")
  ;; Plantillas útiles (corre el buffer actual, módulo, etc.)
  ;; (dap-python-debugger 'debugpy) ;; es el default
  )
#+end_src

* Formatos de Datos (YAML, JSON, CSV, etc.)
#+begin_src emacs-lisp
  ;; Modo para archivos YAML (.yml, .yaml)
  (use-package yaml-mode
    :mode "\\.ya?ml\\'")

  ;; Modo para archivos JSON y variantes
  (use-package json-mode
    :mode ("\\.json\\'" . json-mode)
    :config
    ;; (Opcional) Habilitar soporte para tree-sitter si está disponible
    (add-hook 'json-mode-hook #'json-mode-maybe-enable-pretty-mode))

  ;; Modo para archivos TOML (común en configuraciones de Python con pyproject.toml)
  (use-package toml-mode
    :mode "\\.toml\\'")

  ;; Modo para archivos de valores separados por comas (y tabuladores)
  ;; NOTA: Esto reemplazará tu bloque de csv-mode existente para unificar la configuración.
  (use-package csv-mode
    :mode (("\\.csv\\'" . csv-mode)
           ;; Fix para TSV: Mapeamos la extensión .tsv a csv-mode para un manejo unificado.
           ("\\.tsv\\'" . csv-mode))
    :init
    ;; Le enseñamos a csv-mode a reconocer también tabuladores como separadores.
    (setq csv-separators '(";" "," "\t")))

  ;; si las gramáticas correspondientes están instaladas.
  (use-package treesit-auto
    :if (fboundp 'treesit-available-p) ; Solo se activa si tu Emacs soporta Tree-sitter
    :config
    (global-treesit-auto-mode 1)
    ;; LLAMADA A LA FUNCIÓN DE INSTALACIÓN AUTOMÁTICA
    (jinxx/install-treesit-grammars))
#+end_src

* Gestión de Entornos (Conda)
#+begin_src emacs-lisp
  ;; (LSP, Jupyter, terminales), asegurando que se usen las librerías correctas.
  (use-package conda
    :ensure t
    :config
    ;; Asegúrate de que esta ruta sea correcta para tu sistema.
    (setq conda-anaconda-home (expand-file-name "~/anaconda3")) ; O "~/miniconda3"
    (conda-env-initialize-interactive-shells)
    (conda-env-initialize-eshell))
#+end_src

* Contenedores (Docker)
#+begin_src emacs-lisp
  ;; Proporciona resaltado de sintaxis para archivos Dockerfile.
  (use-package dockerfile-mode
    :ensure t)

  ;; Una interfaz completa para gestionar contenedores, imágenes, volúmenes, etc.,
  (use-package docker
    :ensure t
    :commands (docker-containers docker-images))
#+end_src

* Herramientas de Calidad y Estilo
#+begin_src emacs-lisp
  ;; definidas en un archivo .editorconfig en la raíz de un proyecto.
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))

  ;; Corrector ortográfico moderno y minimalista en tiempo real.
  (use-package jinx
    :ensure t
    :hook (text-mode . jinx-mode)
    :bind (("M-$" . jinx-correct-word)))
#+end_src

* Confirmación
#+begin_src emacs-lisp
(message "packages.org cargado")
#+end_src

